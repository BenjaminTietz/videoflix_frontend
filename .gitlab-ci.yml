stages:
  - build
  - deploy

variables:
  NODE_VERSION: "21"

# Build Job für den Server "lukas"
build_job_lukas:
  stage: build
  image: node:${NODE_VERSION}-alpine
  before_script:
    # Spezifische environment.ts für den Server "lukas" anlegen
    - mkdir -p src/environments
    - |
      echo "export const environment = { production: true, baseUrl: 'https://backend.lukas-nolting.eu' };" > src/environments/environment.ts
  script:
    - echo "Verwende Node.js Version ${NODE_VERSION} für den Server 'lukas'"
    - npm install
    - npm run build --if-present
  artifacts:
    paths:
      - dist/videoflix_frontend/browser
  only:
    - alex

# Deploy Job für den Server "lukas" via FTPS
deploy_job_lukas_frontend:
  stage: deploy
  image: curlimages/curl:latest
  dependencies:
    - build_job_lukas
  before_script:
    - echo "Bereite die Dateien für den Upload vor..."
    # Kopiere den Inhalt von dist in einen temporären Ordner zur Vorbereitung
    - mkdir -p tmp_deployment && cp -R dist/videoflix_frontend/browser/* tmp_deployment/
    # Entferne alle Dateien und Ordner außer den Ausnahmen
    - find tmp_deployment -type f ! -name "robots.txt" ! -name ".htaccess" ! -path "*/pytest/*" ! -path "*/docs/*" ! -path "*/cgi-bin/*" -exec rm -rf {} +
  script:
    - echo "Starte den FTPS-Upload..."
    - find ./tmp_deployment -type f | while read file; do
        remote_path="${file#./tmp_deployment/}";
        curl --ftp-ssl --ftp-create-dirs --user "$LUKASUSERNAME:$LUKASPASSWORD" -T "$file" "ftp://${LUKASHOST}:21/$remote_path";
      done
  only:
    - alex

# Build Job für den Server "alex" test
build_job_alex:
  stage: build
  image: node:${NODE_VERSION}-alpine
  before_script:
    # Spezifische environment.ts für den Server "alex" anlegen
    - mkdir -p src/environments
    - |
      echo "export const environment = { production: true, baseUrl: 'https://luft-alex.de' };" > src/environments/environment.ts
  script:
    - echo "Verwende Node.js Version ${NODE_VERSION} für den Server 'alex'"
    - npm install
    - npm run build --if-present
  artifacts:
    paths:
      - dist/videoflix_frontend/browser
  only:
    - alex

# Deploy Job für den Server "alex" test
deploy_job_alex_frontend:
  stage: deploy
  image: alpine:latest
  dependencies:
    - build_job_alex
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$SSH_HOST_ALEX" >> ~/.ssh/known_hosts
  script:
    - echo "Bereinige Zielverzeichnis auf dem Server 'alex'..."
    - ssh "$SSH_USER@$SSH_HOST_ALEX" 'find /home/videoflix_frontend/ -mindepth 1 ! -name "robots.txt" ! -name ".htaccess" ! -name "pytest" ! -name "docs" ! -name "cgi-bin" -exec rm -rf {} +'
    - echo "Starte den Upload auf den Server 'alex'..."
    - scp -r dist/videoflix_frontend/browser/* "$SSH_USER@$SSH_HOST_ALEX:/home/videoflix_frontend/"
  only:
    - prod

# Build Job für den Server "benjamin"
build_job_benjamin:
  stage: build
  image: node:${NODE_VERSION}-alpine
  before_script:
    - mkdir -p src/environments
    - |
      echo "export const environment = { production: true, baseUrl: 'https://backend-benjamin-tietz.de' };" > src/environments/environment.ts
  script:
    - echo "Verwende Node.js Version ${NODE_VERSION} für den Server 'benjamin'"
    - npm install
    - npm run build --if-present
  artifacts:
    paths:
      - dist/videoflix_frontend/browser
  only:
    - alex

# Deploy Job für den Server "benjamin"
deploy_job_benjamin:
  stage: deploy
  image: curlimages/curl:latest
  dependencies:
    - build_job_benjamin
  script:
    - echo "Starte den FTPS-Upload..."
    - find ./dist/videoflix_frontend/browser -type f | while read file; do
        remote_path="${file#./dist/videoflix_frontend/browser/}";
        curl --ftp-ssl --ftp-create-dirs --user "$BEN_USERNAME:$BEN_PASSWORD" -T "$file" "ftp://${SSH_FRONTEND_BEN_HOST}:21/$remote_path";
      done
  only:
    - alex
